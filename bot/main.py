### bot/main.py
from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv
import os
import aiohttp
import base64

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
PROXY_API_URL = os.getenv("PROXY_API_URL", "http://localhost:8000")
BOT_VERSION = os.getenv("BOT_VERSION", "0.2")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(text="üå± –£—Ö–æ–¥ –∑–∞ —Ç–æ–º–∞—Ç–∞–º–∏", callback_data="tomatoes"),
        InlineKeyboardButton(text="üêõ –í—Ä–µ–¥–∏—Ç–µ–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π", callback_data="pests"),
        InlineKeyboardButton(text="üíß –ö–æ–≥–¥–∞ –ø–æ–ª–∏–≤–∞—Ç—å?", callback_data="watering")
    )
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç! –Ø –∞–≥—Ä–æ–±–æ—Ç ü§ñ v{BOT_VERSION}\n–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –≥–æ—Ç–æ–≤—ã–π:", reply_markup=keyboard)

@dp.callback_query_handler()
async def handle_callback(callback_query: types.CallbackQuery):
    prompts = {
        "tomatoes": "–ö–∞–∫ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Ç–æ–º–∞—Ç–∞–º–∏ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≥—Ä—É–Ω—Ç–µ?",
        "pests": "–ö–∞–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –ª–∏—Å—Ç—å—è—Ö?",
        "watering": "–ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ª–∏–≤–∞—Ç—å –æ–≥—É—Ä—Ü—ã –ª–µ—Ç–æ–º?"
    }
    prompt = prompts.get(callback_query.data)
    if prompt:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{PROXY_API_URL}/ask", json={"prompt": prompt}) as result:
                data = await result.json()
                reply = data.get("reply", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
                await callback_query.message.answer(reply)
    await callback_query.answer()

@dp.message_handler(content_types=ContentType.TEXT)
async def handle_text(message: types.Message):
    prompt = message.text
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{PROXY_API_URL}/ask", json={"prompt": prompt}) as result:
            data = await result.json()
            reply = data.get("reply", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞")
            await message.reply(reply)

@dp.message_handler(content_types=ContentType.PHOTO)
async def handle_photo(message: types.Message):
    caption = message.caption or "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ?"
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = file.file_path
    photo_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path}"

    async with aiohttp.ClientSession() as session:
        async with session.get(photo_url) as resp:
            img_bytes = await resp.read()
            img_b64 = base64.b64encode(img_bytes).decode()

        payload = {"prompt": caption, "image_base64": img_b64}
        async with session.post(f"{PROXY_API_URL}/ask", json=payload) as result:
            data = await result.json()
            reply = data.get("reply", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            await message.reply(reply)

@dp.message_handler(content_types=ContentType.VOICE)
async def handle_voice(message: types.Message):
    try:
        voice = message.voice
        file = await bot.get_file(voice.file_id)
        file_path = file.file_path
        voice_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path}"

        async with aiohttp.ClientSession() as session:
            async with session.get(voice_url) as resp:
                audio_bytes = await resp.read()

            form = aiohttp.FormData()
            form.add_field("file", audio_bytes, filename="voice.ogg", content_type="audio/ogg")
            async with session.post(f"{PROXY_API_URL}/transcribe", data=form) as result:
                data = await result.json()
                reply = data.get("reply", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ")
                await message.reply(reply)
    except Exception as e:
        await message.reply("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
